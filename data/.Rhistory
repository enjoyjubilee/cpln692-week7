# install.packages(knitr)
# library(knitr)
rmarkdown::render("Boston_Houseprice_Prediction_SutongJiang.Rmd")
Neighborhood3<- df1 %>% filter(Neighborho == "South End"|Neighborho == "South Boston"|Neighborho == "Mattapan" ) %>%
mutate(incomeN = as.factor(ifelse(Neighborho == "South End" ,'Expensive',
ifelse(Neighborho == "Mattapan","Low-priced",
"Middle"))))%>%
dplyr::select(NUM_FLOORS, R_BDRMS,R_FULL_BTH,R_HALF_BTH,R_FPLACE,
WalkScore,BikeScore,PCTBACHMOR,PCTWHITE,PCTVACANT,SchoolGrad,
CrimeIndex,LAND_SF,LIVING_ARE,DistToCBD,MEDHHINC,Dist_Major,ALAND10,Ave_SalePr,incomeN)
variable_summary
###########Need to revise####################
Housing <- dfAll%>%
dplyr::select(SalePrice, LAND_SF, LIVING_ARE, DistToCBD, MEDHHINC, Dist_Major,
ALAND10, Ave_SalePr,SchoolGrad, WalkScore, BikeScore,PCTVACANT, PCTBACHMOR, R_BDRMS,
R_FULL_BTH, R_HALF_BTH, R_FPLACE, PCTWHITE, CrimeIndex,
)%>%
na.omit()
mean<-apply(Housing, 2, mean) %>% as.data.frame()
colnames(mean)<-c("Mean")
colnames(mean)<-c("Mean")
sd<-apply(Housing , 2, sd)%>% as.data.frame()
median<-apply(Housing , 2, median)%>% as.data.frame()
max<-apply(Housing , 2, max)%>% as.data.frame()
colnames(max)<-c("Max")
colnames(max)<-c("Max")
HousingTable<-cbind(mean,median,sd,max,min)
HousingTable<-lapply(HousingTable, round, 3) %>% as.data.frame()
variable_summary<-kable(HousingTable,format='html',caption='Summary Statistics',
align='c',format.args = list(big.mark = ",")) %>%
kable_styling(latex_options = c("striped", "hold_position"),full_width = F)
variable_summary
colnames(sd)<-c("SD")
colnames(median)<-c("Median")
colnames(min)<-c("Min")
colnames(max)<-c("Max")
HousingTable<-cbind(mean,median,sd,max,min)
HousingTable<-lapply(HousingTable, round, 3) %>% as.data.frame()
rownames(HousingTable)<-c("SalePrice","LAND_SF","LIVING_ARE","DistToCBD","MEDHHINC","Dist_Major","ALAND10","Ave_SalePr","SchoolGrade","WalkScore","BikeScore","PCTVANAT","PCTBACHMOR","R_BDRMS","R_FULL_BTH","R_HALF_BTH","R_FPLACE","PCTWHITE","CrimeIndex")
variable_summary<-kable(HousingTable,format='html',caption='Summary Statistics',
align='c',format.args = list(big.mark = ",")) %>%
kable_styling(latex_options = c("striped", "hold_position"),full_width = F)
variable_summary
# Detect the outliers by boxplot
# boxplot + dotplot on degree of discretion
p2.1<-ggplot(df1, aes(x=1,SalePrice))+
geom_boxplot(fill = mapcolors[c(3)]) +
scale_y_manual(values = c(0,2320000,4640000,6960000,9280000,11600000))+
labs(title = "Degree of Discretion",
subtitle = "0 Value elimninated",
y = "Sale Price(quantile break)")+
graphTheme()
reg1_table
reg1_summary <- data.frame(RSquared = summary(reg1)$r.square,
Adjusted RSquared = summary(reg1)$adj.r.square,
library(prettydoc)
install.packages("prettydoc")
library(prettydoc)
# Divide the rich neighborhood as the test, and the rest as train
test_rich <- dfTrain dplyr::%>%
# Divide the rich neighborhood as the test, and the rest as train
library(dplyr)
test_rich <- dfTrain%>%
as.data.frame() %>%
filter(Neighborho == "South End")
?RMSE()
library(caret)
library(kableExtra)
library(kableExtra)
reg_testEvaluation <-
reg_testDf%>%
mutate(error = predictedHP - observedHP)%>%
mutate(absError = abs(predictedHP - observedHP))%>%
mutate(percentAbsError = abs(exp(predictedHP) - exp(observedHP))/exp(observedHP))
Neighborhood3<- df1 %>% filter(Neighborho == "South End"|Neighborho == "South Boston"|Neighborho == "Mattapan" ) %>%
mutate(incomeN = as.factor(ifelse(Neighborho == "South End" ,'Expensive',
ifelse(Neighborho == "Mattapan","Low-priced",
"Middle"))))%>%
dplyr::select(NUM_FLOORS, R_BDRMS,R_FULL_BTH,R_HALF_BTH,R_FPLACE,
WalkScore,BikeScore,PCTBACHMOR,PCTWHITE,PCTVACANT,SchoolGrad,
CrimeIndex,LAND_SF,LIVING_ARE,DistToCBD,MEDHHINC,Dist_Major,ALAND10,Ave_SalePr,incomeN)
Neighborhood3<- df1 %>% filter(Neighborho == "South End"|Neighborho == "South Boston"|Neighborho == "Mattapan" ) %>%
mutate(incomeN = as.factor(ifelse(Neighborho == "South End" ,'Expensive',
ifelse(Neighborho == "Mattapan","Low-priced",
"Middle"))))%>%
dplyr::select(NUM_FLOORS, R_BDRMS,R_FULL_BTH,R_HALF_BTH,R_FPLACE,
WalkScore,BikeScore,PCTBACHMOR,PCTWHITE,PCTVACANT,SchoolGrad,
CrimeIndex,LAND_SF,LIVING_ARE,DistToCBD,MEDHHINC,Dist_Major,ALAND10,Ave_SalePr,incomeN)
Neighborhood3$NUM_FLOORS<-as.numeric(Neighborhood3$NUM_FLOORS)
Neighborhood3<-gather(Neighborhood3,variable, value,-incomeN)
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(breaks = c("Middle", "Low-priced", "Expensive"))+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18
p18
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(breaks = c(1,2,3)))+
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(breaks = c(1,2,3))+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18
?scale_x_discrete
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(breaks = waiver())+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18p18
p18
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(limits = c("Low-priced","Middle","Expensive"),labels = abbreviate, expand_scale())+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(1,3,6)],name = "Neighborhoods",labels=c("Middle(South Boston)","Low-priced(Mattapan)","Expensive(South End")) +
scale_x_discrete(breaks = NULL, limits = c("Low-priced","Middle","Expensive"),labels = abbreviate, expand_scale())+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18
p18<-ggplot(data = Neighborhood3, aes(incomeN,value)) +
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
facet_wrap(~variable,scales="free",ncol=5) +
scale_fill_manual(values =mapcolors[c(6,1,3)],name = "Neighborhoods",labels=c("Expensive(South End)","Low-priced(Mattapan)","Middle(South Boston")) +
scale_x_discrete(breaks = NULL, limits = c("Low-priced","Middle","Expensive"))+
labs(title="Variable Distribution across Neighborhoods",
subtitle = "Internal,Locality and Enviromental Predictors(numeric)",
x="Neighborhood",
y="Value") +
graphTheme()
p18
?`head,sparseVector-method
head(Neighborhood3)
head(Neighborhood3)
geom_boxplot(aes(fill=incomeN),width=25,alpha=0.6) +
>
head(Neighborhood3)
head
Neighborhood3$CrimeIndex
head(Neighborhood3)
?ggarrange
gc()
mapcolors <- c("#53abaa", #Peacock Green
"#629baa", #Grey Blue,
"#7686ab", # MeltedBlue,
"#8379ac", # Melted purple
"#9665ad", # Grey purple,
"#a555ad") #Purple
library(pdflatex)
beijing <- qmap('London',zoom = 12, maptype = 'hybrid')
library(ggmap)
library(tidyverse)
library(ggplot2)
library(sf)
library(boot)
library(MASS)
library(QuantPsyc)
library(ModelMetrics)
library(kableExtra)
library(ggmap)
beijing <- qmap('London',zoom = 12, maptype = 'hybrid')
# Load the libraries
library(tidyverse)
library(ggplot2)
library(sf)
library(boot)
library(MASS)
library(QuantPsyc)
library(ModelMetrics)
library(kableExtra)
library(ggmap)
library(sf)
library(dplyr)
library(tidyverse)
datCp <- read.csv("data_companies.csv")
setwd("~/CPLN692-Javascript/cpln692-week7/data")
datCp <- read.csv("data_companies.csv")
datCp_edit <- filter(datCp_edit,abs(datCp_edit$longitude)>100)
datCp_edit <- filter(datCp,abs(datCp_edit$longitude)>100)
datCp_edit <- filter(datCp,abs(datCp$longitude)>100)
summary(datCp_edit$longitude)
datCp_edited <- filter(datCp,abs(datCp$longitude)<100)
summary(datCp_edited$longitude)
datCp_edited <- filter(datCp,abs(datCp$longitude)<100)%>%
filter(datCp_edited,abs(datCp_edited$longitude>70))
datCp_edited <- filter(datCp,abs(datCp$longitude)<100)%>%
filter(datCp_edited,abs(datCp_edited$longitude)>70))
datCp_edited <- filter(datCp,abs(datCp$longitude)<100)%>%
filter(datCp_edited,abs(datCp_edited$longitude)>70)
summary(datCp_edited$longitude)
datCp_edited <- filter(datCp,abs(datCp$longitude)<100)%>%
dataCp_cleaned <- filter(datCp_edited,abs(datCp_edited)>70)
dataCp_cleaned <- filter(datCp_edited,abs(datCp_edited)>70)
dataCp_cleaned <- filter(datCp_edited,abs(datCp_edited$longitude)>70)
write.csv(dataCp_cleaned,"dataCp_cleaned.csv")
row_number(dataCp_cleaned)
head(dataCp_cleaned)
?return
dataCp_cleaned[order(-ave(dataCp_cleaned$year, dataCp_cleaned$company, FUN = max), -dataCp_cleaned$year), ]
head(dataCp_cleaned)
dataCp_cleaned$year
?ave()
ave(dataCp_cleaned$year,dataCp_cleaned$company, FUN = max)
dataCp_cleaned[order(ave(dataCp_cleaned$year, dataCp_cleaned$company, FUN = max), dataCp_cleaned$year), ]
?order()
dataCp_cleaned[order(ave(dataCp_cleaned$year, dataCp_cleaned$company, FUN = max), -dataCp_cleaned$year), ]
dataCp_cleaned[order(-ave(dataCp_cleaned$year, dataCp_cleaned$company, FUN = max), -dataCp_cleaned$year), ]
write.csv(dataCp_cleaned,"test.csv")
for(i in seq(from=0, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
}else{
return(dataCp_cleaned)
}
}
for(i in seq(from=0, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1]$company==dataCp_cleaned[i]){
if (dataCp_cleaned[i+1]$year>dataCp_cleaned[i]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
}else{
return(dataCp_cleaned)
}
}
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
}else{
return(dataCp_cleaned)
}
for(i in seq(from=0, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
}else{
return(dataCp_cleaned)
}
}
for(i in seq(from=1, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
}else{
return(dataCp_cleaned)
}
}
for(i in seq(from=1, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
return(dataCp_cleaned)
}else{
return(dataCp_cleaned)
}
}
dataCp_cleaned
for(i in seq(from=1, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,])
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),])
}
return(dataCp_cleaned)
}else{
return(dataCp_cleaned);
i = i+1
}
}
for(i in seq(from=1, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
if (dataCp_cleaned[i+1,]$year>dataCp_cleaned[i,]$year){
return(dataCp_cleaned<-dataCp_cleaned[-i,]);
i=i+1
}else{
return(dataCp_cleanded<-dataCp_cleaned[-(i+1),]);
i=i+1
}
return(dataCp_cleaned)
}else{
return(dataCp_cleaned);
i = i+1;
}
}
dataCp_cleaned
for(i in seq(from=1, to=1215, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
return(dataCp_cleaned<-dataCp_cleaned[-i,]);
}else{
return(dataCp_cleanded);
}
}
return(dataCp_cleaned);
for(i in seq(from=0, to=1214, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
return(dataCp_cleaned<-dataCp_cleaned[-i,]);
}else if(dataCp_cleaned[i+1,]$company!=dataCp_cleaned[i,]$company){
return(dataCp_cleaned);
}else{
return(dataCp_cleaned)
}
}
dataCp_cleaned[1,]
dataCp_cleaned[0,]
for(i in seq(from=1, to=1214, by=1)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
return(dataCp_cleaned<-dataCp_cleaned[-i,]);
}else if(dataCp_cleaned[i+1,]$company!=dataCp_cleaned[i,]$company){
return(dataCp_cleaned);
}else{
return(dataCp_cleaned)
}
}
print(dataCp_cleaned)
for(i in 1:nrow(dataCp_cleaned)){
#  pick the latest year of record for one company
if (dataCp_cleaned[i+1,]$company==dataCp_cleaned[i,]$company){
return(dataCp_cleaned<-dataCp_cleaned[-i,]);
}else if(dataCp_cleaned[i+1,]$company!=dataCp_cleaned[i,]$company){
return(dataCp_cleaned);
}else{
return(dataCp_cleaned)
}
return(dataCp_cleaned)
}
test<-dataCp_cleaned[order(dataCp_cleaned$company,-dataCp_cleaned$year)]
?order()
test<-dataCp_cleaned[order(dataCp_cleaned%>%group_by(dataCp_cleaned$company),-dataCp_cleaned$year)]
test<-dataCp_cleaned[order(dataCp_cleaned%>%group_by(dataCp_cleaned$company)%>%as.data.frame(),-dataCp_cleaned$year)]
dataCp_cleaned[c(11105,5035,6228),]
?na.omit()
test<-dataCp_cleaned[order(dataCp_cleaned%>%
group_by(dataCp_cleaned$company)%>%as.data.frame(),-dataCp_cleaned$year)%>%
na.omit(dataCp_cleaned,dataCp_cleaned$company==NA)]
test<-dataCp_cleaned[order(dataCp_cleaned%>%
group_by(dataCp_cleaned$company)%>%as.data.frame(),-dataCp_cleaned$year)%>%
na.omit(dataCp_cleaned,dataCp_cleaned$rank==NA)]
dataCp_cleaned[c(11105,5035,6228,6536,11117,4994),]
?is.na
is.na(dataCp_cleaned)
dataCp_cleaned[is.na(dataCp_cleaned)==TRUE,]
View(dataCp_cleaned)
is.na(dataCp_cleaned$rank)
is.na(dataCp_cleaned$rank)==TRUE
anyNA(dataCp_cleaned)
anyNA(dataCp_cleaned$rank)
test<-dataCp_cleaned[order(dataCp_cleaned%>%
group_by(dataCp_cleaned$company)%>%as.data.frame(),-dataCp_cleaned$year)
]
?group_by
test<-group_by(dataCp_cleaned,company)
head(test)
order(test,-year)
order(test,-test$year)
?order_by
?order
test<-test[order(test$year,decreasing = TRUE)]
test<-test[order(test$year,decreasing = TRUE),]
test
test<-test[order(test$year,decreasing = TRUE),]%>%group_by(test$company)
test<-test[order(test$year,decreasing = TRUE),]%>%group_by(test,test$company)
test<-test[order(test$year,decreasing = TRUE),]%>%
test[order(test$company,decreasing = FALSE)]
?summarize
test<-group_by(test$company)%>%
summarise(test,max(test$year))
test<-group_by(test,test$company)%>%
summarise(test,max(test$year))
?group_by
group_by(test,test$company)
test<-group_by(test,test$company)%>%
arrage(-year)
test%>%groupby(company)%>%arrange(-year)
test%>%group_by(company)%>%arrange(-year)
?summarise
test%>%group_by(company)%>%summarise(max(year))
a<-test%>%group_by(company)%>%summarise(max(year))
write.csv(a,"a.csv")
a<-test%>%group_by(company)%>%[summarise(max(year)),]
？match
?match
b<-left_join(a, test) %>%
select_(.dots = names(test))
b<-left_join(a, test) %>%
select(.dots = names(test))
head(b)
?select()
test2<-dataCp_cleaned[order(dataCp_cleaned%>%
group_by(dataCp_cleaned$company)%>%as.data.frame(),-dataCp_cleaned$year)
]%>%select(max(year))
b<-semi_join(a,test)
head(b)
semi_join()
b
?select_
?select
b<-left_join(a, test) %>%
rename(.dots = names(test))
b<-left_join(a, test) %>%
select(.dots = names(test))
b
names(test)
select(b,.dots=names(test))
b<-left_join(a, test) %>%
# select(.dots = names(test))
select(b,.dots=names(test))
b<-left_join(a, test) %>%
head(b)
colnames(b)<-names(test)
head(b)
b<-left_join(a, test)%>%as.data.frame()
colnames(b)<-names(test)
head(b)
b<-left_join(a, test)
View(b)
?left_join
b<-left_join(a, test)
head(b)
nrow(b)
b<-left_join(a, test)%>%na.omit(test$company==NA)
b<-left_join(a, test)%>%filter(company!=NA)
b<-left_join(a, test)%>%is.na(company==NA)%>%filter(company!==NA)
b<-left_join(a, test)%>%is.na(b$company==NA)%>%filter(b$company!=NA)
b<-left_join(a, test)%>%filter(b$company!=NA)
b<-left_join(a, test)%>%filter(-b$company==NA)
b<-left_join(a, test)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(b, "company")
is.na(b$company)
is.na(b$company)==TRUE
b$company==NA
head(b)
?summarise
?summarize_each
a<-test%>%group_by(company)%>%top_n(1,year)
head(a)
?top_n
a<-test%>%group_by(company)%>%top_n(1,year)%>5as.data.frame()
a<-test%>%group_by(company)%>%top_n(1,year)%>as.data.frame()
a<-test%>%group_by(company)%>%top_n(1,year)%>%as.data.frame()
write.csv(a,"data_company_new.csv")
View(a)
View(a)
?filter
a<-filter(a,abs(a$longitude)>74 & abs(a$longitude)<80 & abs(a$latitude) >39.6 &abs(a$latitude)<42.5)
write.csv(a,"data_company_new.csv")
remove(a,a[a$company=="Traffic Planning and Design(4)",])
